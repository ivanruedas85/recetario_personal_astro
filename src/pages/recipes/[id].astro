---
import Layout from "../../layouts/Layout.astro";
import RecipeGrid from "../../components/recipes/RecipeGrid.astro";
import { recipes } from "../../data/recipes";

export function getStaticPaths() {
    return recipes.map((recipe) => ({
        params: { id: recipe.id },
        props: { recipe },
    }));
}

const { recipe } = Astro.props;

// Format difficulty
const formattedDifficulty =
    recipe.difficulty.charAt(0).toUpperCase() + recipe.difficulty.slice(1);

// Get related recipes (same category, excluding current)
const relatedRecipes = recipes
    .filter((r) => r.category === recipe.category && r.id !== recipe.id)
    .slice(0, 3);

// Generate star rating
const fullStars = Math.floor(recipe.rating);
const hasHalfStar = recipe.rating % 1 >= 0.5;
const emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);

// Check if recipe has multiple ingredient groups
const hasMultipleIngredients =
    recipe.ingredientsName &&
    recipe.moreIngredients &&
    recipe.moreIngredients.length > 0;

// Check if recipe has multiple instruction groups
const hasMultipleInstructions =
    recipe.instructionName &&
    recipe.moreInstructions &&
    recipe.moreInstructions.length > 0;
---

<Layout title={recipe.title} description={recipe.description}>
    <div class="recipe-details">
        <div class="recipe-header">
            <div class="recipe-breadcrumbs">NavLinks href="/">Inicio</div> &gt; NavLinks
            href="/recipes">Recetas
        </div> &gt; NavLinks href={
            `/categories/${recipe.category.toLowerCase()}`
        }
        >{recipe.category}
    </div>
</Layout>

<h1 class="recipe-title">{recipe.title}</h1>
<p class="recipe-description">{recipe.description}</p>

<div class="recipe-meta">
    <div class="meta-item">
        <svg
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
        >
            <circle cx="12" cy="12" r="10"></circle>
            <polyline points="12 6 12 12 16 14"></polyline>
        </svg>
        <span>{recipe.cookingTime} minutos</span>
    </div>

    <div class="meta-item">
        <svg
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
        >
            <path
                d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"
            ></path>
        </svg>
        <span>Dificultad: {formattedDifficulty}</span>
    </div>

    <div class="meta-item">
        <svg
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="20"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
        >
            <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
            <circle cx="9" cy="7" r="4"></circle>
            <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
            <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
        </svg>
        <span>{recipe.servings} porciones</span>
    </div>

    <div class="meta-item recipe-rating">
        {
            Array(fullStars)
                .fill()
                .map(() => <span class="star filled">★</span>)
        }

        {hasHalfStar && <span class="star half">★</span>}

        {
            Array(emptyStars)
                .fill()
                .map(() => <span class="star">★</span>)
        }

        <span class="rating-value">{recipe.rating.toFixed(1)}</span>
    </div>
</div>

<div class="recipe-content">
    <div class="recipe-image-container">
        <img src={recipe.image} alt={recipe.title} class="recipe-image" />
    </div>

    <div class="recipe-info">
        <div class="recipe-tags">
            {
                recipe.tags &&
                    recipe.tags.map((tag: string) => (
                        <span class="recipe-tag">{tag}</span>
                    ))
            }
        </div>

        <div class="recipe-ingredients">
            <h2>Ingredientes</h2>
            <ul>
                {
                    recipe.ingredients.map((ingredient: string) => (
                        <li>
                            <label class="ingredient-checkbox">
                                <input type="checkbox" />
                                <span class="checkmark" />
                                <span class="ingredient-text">
                                    {ingredient}
                                </span>
                            </label>
                        </li>
                    ))
                }
            </ul>

            {
                hasMultipleIngredients && (
                    <div class="additional-ingredients">
                        <h3>{recipe.ingredientsName}</h3>
                        <ul>
                            {recipe.moreIngredients.map(
                                (ingredient: string) => (
                                    <li>
                                        <label class="ingredient-checkbox">
                                            <input type="checkbox" />
                                            <span class="checkmark" />
                                            <span class="ingredient-text">
                                                {ingredient}
                                            </span>
                                        </label>
                                    </li>
                                ),
                            )}
                        </ul>
                    </div>
                )
            }
        </div>

        <div class="recipe-instructions">
            <h2>Preparación</h2>
            <ol>
                {
                    recipe.instructions.map((step: string, index: number) => (
                        <li>
                            <div class="step-number">{index + 1}</div>
                            <div class="step-text">{step}</div>
                        </li>
                    ))
                }
            </ol>

            {
                hasMultipleInstructions && (
                    <div class="additional-instructions">
                        <h3>{recipe.instructionName}</h3>
                        <ol class="additional-steps">
                            {recipe.moreInstructions.map(
                                (step: string, index: number) => (
                                    <li>
                                        <div class="step-number additional-step-number">
                                            {recipe.instructions.length +
                                                index +
                                                1}
                                        </div>
                                        <div class="step-text">{step}</div>
                                    </li>
                                ),
                            )}
                        </ol>
                    </div>
                )
            }
        </div>

        <div class="recipe-actions">
            <button class="btn btn-primary print-recipe">
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                >
                    <polyline points="6 9 6 2 18 2 18 9"></polyline>
                    <path
                        d="M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"
                    ></path>
                    <rect x="6" y="14" width="12" height="8"></rect>
                </svg>
                Imprimir receta
            </button>

            <button class="btn btn-secondary share-recipe">
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                >
                    <circle cx="18" cy="5" r="3"></circle>
                    <circle cx="6" cy="12" r="3"></circle>
                    <circle cx="18" cy="19" r="3"></circle>
                    <line x1="8.59" y1="13.51" x2="15.42" y2="17.49"></line>
                    <line x1="15.41" y1="6.51" x2="8.59" y2="10.49"></line>
                </svg>
                Compartir
            </button>

            <button class="btn btn-accent save-recipe">
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                >
                    <path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"
                    ></path>
                </svg>
                Guardar
            </button>
        </div>
    </div>
</div>

{
    relatedRecipes.length > 0 && (
        <div class="related-recipes">
            <h2>Recetas relacionadas</h2>
            <RecipeGrid title="" category={recipe.category} limit={3} />
        </div>
    )
}

<script>
    // Print recipe functionality
    document.querySelector(".print-recipe")?.addEventListener("click", () => {
        window.print();
    });

    // Share recipe functionality
    document.querySelector(".share-recipe")?.addEventListener("click", () => {
        if (navigator.share) {
            navigator
                .share({
                    title: document.title,
                    url: window.location.href,
                })
                .catch(console.error);
        } else {
            // Fallback for browsers that don't support Web Share API
            const dummy = document.createElement("input");
            document.body.appendChild(dummy);
            dummy.value = window.location.href;
            dummy.select();
            document.execCommand("copy");
            document.body.removeChild(dummy);

            alert("¡Enlace copiado al portapapeles!");
        }
    });

    // Save recipe (simulated functionality)
    let saved = false;
    const saveButton = document.querySelector(".save-recipe");

    saveButton?.addEventListener("click", () => {
        saved = !saved;

        if (saved) {
            // Update button text and icon
            saveButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="currentColor" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"></path>
        </svg>
        Guardada
      `;
        } else {
            // Reset button
            saveButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"></path>
        </svg>
        Guardar
      `;
        }
    });

    // Ingredient checkbox functionality
    const ingredientCheckboxes = document.querySelectorAll(
        ".ingredient-checkbox input",
    );

    ingredientCheckboxes.forEach((checkbox) => {
        checkbox.addEventListener("change", function () {
            const label = this.closest(".ingredient-checkbox");
            const text = label?.querySelector(".ingredient-text");

            if (this.checked && text) {
                text.style.textDecoration = "line-through";
                text.style.opacity = "0.6";
            } else if (text) {
                text.style.textDecoration = "none";
                text.style.opacity = "1";
            }
        });
    });
</script>

<style>
    .recipe-details {
        max-width: 1000px;
        margin: 0 auto;
    }

    .recipe-breadcrumbs {
        margin-bottom: var(--space-3);
        font-size: 0.9rem;
        color: var(--color-neutral-600);
    }

    .recipe-breadcrumbs a {
        color: var(--color-neutral-600);
        text-decoration: none;
        transition: color var(--transition-fast);
    }

    .recipe-breadcrumbs a:hover {
        color: var(--color-primary-500);
    }

    .recipe-title {
        font-size: 2.5rem;
        margin-bottom: var(--space-2);
    }

    .recipe-description {
        font-size: 1.1rem;
        color: var(--color-neutral-600);
        margin-bottom: var(--space-3);
    }

    .recipe-meta {
        display: flex;
        flex-wrap: wrap;
        gap: var(--space-4);
        margin-bottom: var(--space-4);
    }

    .meta-item {
        display: flex;
        align-items: center;
        gap: var(--space-1);
        color: var(--color-neutral-700);
        font-size: 0.95rem;
    }

    .recipe-rating {
        display: flex;
        align-items: center;
    }

    .star {
        color: var(--color-neutral-300);
        font-size: 1.2rem;
    }

    .star.filled {
        color: var(--color-accent-500);
    }

    .star.half {
        position: relative;
        color: var(--color-neutral-300);
    }

    .star.half::before {
        content: "★";
        position: absolute;
        color: var(--color-accent-500);
        width: 50%;
        overflow: hidden;
    }

    .rating-value {
        margin-left: var(--space-1);
    }

    .recipe-content {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: var(--space-5);
        margin-bottom: var(--space-6);
    }

    .recipe-image-container {
        position: sticky;
        top: var(--space-4);
        height: fit-content;
    }

    .recipe-image {
        width: 100%;
        border-radius: var(--border-radius-lg);
        box-shadow: var(--shadow-md);
    }

    .recipe-tags {
        display: flex;
        flex-wrap: wrap;
        gap: var(--space-2);
        margin-bottom: var(--space-4);
    }

    .recipe-tag {
        background-color: var(--color-neutral-200);
        color: var(--color-neutral-700);
        padding: 4px var(--space-2);
        border-radius: var(--border-radius-md);
        font-size: 0.9rem;
    }

    .recipe-ingredients,
    .recipe-instructions {
        margin-bottom: var(--space-5);
    }

    .recipe-ingredients h2,
    .recipe-instructions h2 {
        font-size: 1.5rem;
        margin-bottom: var(--space-3);
        color: var(--color-neutral-900);
    }

    .additional-ingredients {
        margin-top: var(--space-4);
        padding-top: var(--space-4);
        border-top: 2px solid var(--color-primary-200);
    }

    .additional-ingredients h3 {
        font-size: 1.2rem;
        margin-bottom: var(--space-3);
        color: var(--color-primary-600);
        display: flex;
        align-items: center;
        gap: var(--space-2);
    }

    .additional-ingredients h3::before {
        content: "";
        font-size: 1.5rem;
    }

    .additional-instructions {
        margin-top: var(--space-4);
        padding-top: var(--space-4);
        border-top: 2px solid var(--color-secondary-200);
    }

    .additional-instructions h3 {
        font-size: 1.2rem;
        margin-bottom: var(--space-3);
        color: var(--color-secondary-600);
        display: flex;
        align-items: center;
        gap: var(--space-2);
    }

    .additional-instructions h3::before {
        content: "";
        font-size: 1.5rem;
    }

    .additional-steps {
        padding-left: 0;
        counter-reset: none;
        list-style: none;
    }

    .additional-step-number {
        background-color: var(--color-secondary-500) !important;
    }

    .recipe-ingredients ul {
        list-style: none;
        padding: 0;
    }

    .recipe-ingredients li {
        margin-bottom: var(--space-2);
    }

    .ingredient-checkbox {
        display: flex;
        align-items: center;
        position: relative;
        padding-left: 35px;
        cursor: pointer;
        font-size: 1rem;
        user-select: none;
    }

    .ingredient-checkbox input {
        position: absolute;
        opacity: 0;
        cursor: pointer;
        height: 0;
        width: 0;
    }

    .checkmark {
        position: absolute;
        left: 0;
        height: 20px;
        width: 20px;
        background-color: var(--color-neutral-200);
        border-radius: var(--border-radius-md);
        transition: background-color var(--transition-fast);
    }

    .ingredient-checkbox:hover input ~ .checkmark {
        background-color: var(--color-neutral-300);
    }

    .ingredient-checkbox input:checked ~ .checkmark {
        background-color: var(--color-primary-500);
    }

    .checkmark:after {
        content: "";
        position: absolute;
        display: none;
    }

    .ingredient-checkbox input:checked ~ .checkmark:after {
        display: block;
    }

    .ingredient-checkbox .checkmark:after {
        left: 7px;
        top: 3px;
        width: 5px;
        height: 10px;
        border: solid white;
        border-width: 0 2px 2px 0;
        transform: rotate(45deg);
    }

    .recipe-instructions ol {
        padding-left: 0;
        counter-reset: step-counter;
        list-style: none;
    }

    .recipe-instructions li {
        position: relative;
        display: flex;
        margin-bottom: var(--space-3);
        padding-bottom: var(--space-3);
        border-bottom: 1px solid var(--color-neutral-200);
    }

    .recipe-instructions li:last-child {
        border-bottom: none;
    }

    .step-number {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 30px;
        height: 30px;
        background-color: var(--color-primary-500);
        color: white;
        border-radius: 50%;
        font-weight: 600;
        margin-right: var(--space-3);
        flex-shrink: 0;
    }

    .step-text {
        flex: 1;
        padding-top: 5px;
    }

    .recipe-actions {
        display: flex;
        gap: var(--space-3);
        margin-top: var(--space-5);
    }

    .recipe-actions button {
        display: flex;
        align-items: center;
        gap: var(--space-1);
    }

    .related-recipes {
        margin-top: var(--space-6);
        padding-top: var(--space-5);
        border-top: 1px solid var(--color-neutral-300);
    }

    .related-recipes h2 {
        margin-bottom: var(--space-4);
    }

    @media (max-width: 768px) {
        .recipe-title {
            font-size: 1.8rem;
        }

        .recipe-meta {
            flex-direction: column;
            gap: var(--space-2);
        }

        .recipe-content {
            grid-template-columns: 1fr;
        }

        .recipe-image-container {
            position: relative;
            top: 0;
        }

        .recipe-actions {
            flex-wrap: wrap;
        }

        .recipe-actions button {
            flex: 1;
            min-width: 120px;
            justify-content: center;
        }
    }

    /* Print styles */
    @media print {
        .site-header,
        .site-footer,
        .recipe-actions,
        .related-recipes {
            display: none;
        }

        .recipe-content {
            grid-template-columns: 1fr;
        }

        .recipe-image {
            max-width: 400px;
            margin: 0 auto var(--space-4);
        }
    }
</style>
